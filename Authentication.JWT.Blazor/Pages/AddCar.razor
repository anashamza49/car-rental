@page "/add-car"
@using Authentification.JWT.Service.DTOs
@using Authentification.JWT.Web.Services
@using Blazored.LocalStorage
@inject CarService CarService
@inject NavigationManager Navigation

<h3>Add a New Car</h3>

<EditForm Model="@carDto" OnValidSubmit="HandleAddCar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="brand">Brand</label>
        <InputText id="brand" class="form-control" @bind-Value="carDto.Brand" />
        <ValidationMessage For="@(() => carDto.Brand)" />
    </div>

    <div class="form-group">
        <label for="model">Model</label>
        <InputText id="model" class="form-control" @bind-Value="carDto.Model" />
        <ValidationMessage For="@(() => carDto.Model)" />
    </div>

    <div class="form-group">
        <label for="year">Year</label>
        <InputNumber id="year" class="form-control" @bind-Value="carDto.Year" />
        <ValidationMessage For="@(() => carDto.Year)" />
    </div>

    <div class="form-group">
        <label for="licensePlate">License Plate</label>
        <InputText id="licensePlate" class="form-control" @bind-Value="carDto.LicensePlate" />
        <ValidationMessage For="@(() => carDto.LicensePlate)" />
    </div>

    <div class="form-group">
        <label for="image">Car Image</label>
        <InputFile id="image" class="form-control" OnChange="HandleFileSelected" />
        <ValidationMessage For="@(() => carDto.ImageUrl)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Car</button>
</EditForm>

@if (isError)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> Unable to add the car. Please try again.
        <p>@errorMessage</p>
    </div>
}

@code {
    private CarDto carDto = new CarDto();
    private bool isError = false;
    private string errorMessage = string.Empty;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            carDto.ImageUrl = Convert.ToBase64String(memoryStream.ToArray());
        }
    }

    private async Task HandleAddCar()
    {
        try
        {
            var response = await CarService.AddCarAsync(carDto);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/list-cars");
            }
            else
            {
                isError = true;
                errorMessage = $"Failed to add car. Status code: {response.StatusCode}";
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error adding car: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"An error occurred while adding the car: {ex.Message}";
        }
    }
}
