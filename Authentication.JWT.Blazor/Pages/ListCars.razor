@page "/list-cars"
@using Authentification.JWT.Service.DTOs
@using Authentification.JWT.Web.Services
@using Blazored.LocalStorage
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject CarService CarService

<PageTitle>Your Cars</PageTitle>

<div class="cars-container">
    <button class="add-car-btn" @onclick="NavigateToAddCar">+ Add Car</button>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="error-message">
            <p>@errorMessage</p>
        </div>
    }
    else
    {
        <div class="cars-header">
            <h3 class="cars-title">Your Cars</h3>
        </div>

        <div class="cars-grid">
            @foreach (var car in cars.Skip((currentPage - 1) * carsPerPage).Take(carsPerPage))
            {
                <div class="car-card">
                    <div class="car-image-container">
                        @if (!string.IsNullOrWhiteSpace(car.ImageUrl))
                        {
                            <img src="@car.ImageUrl" alt="@car.Model" class="car-image" onerror="this.classList.add('image-loading-failed')" />
                        }
                        else
                        {
                            <div class="no-image">
                                <div class="car-svg-icon"></div>
                            </div>
                        }
                        <div class="car-brand-badge">@car.Brand</div>
                    </div>
                    <div class="car-content">
                        <h4 class="car-model">@car.Model</h4>
                        <div class="car-details">
                            <div class="car-detail">
                                <span class="car-detail-label">Brand:</span>
                                <span class="car-detail-value">@car.Brand</span>
                            </div>
                            <div class="car-detail">
                                <span class="car-detail-label">Year:</span>
                                <span class="car-detail-value">@car.Year</span>
                            </div>
                            <div class="car-detail">
                                <span class="car-detail-label">License Plate:</span>
                                <span class="car-detail-value">@car.LicensePlate</span>
                            </div>
                        </div>
                    </div>
                    <div class="car-actions">
                        <button class="edit-btn" @onclick="() => OpenUpdatePopup(car)">Modifier</button>
                        <button class="delete-btn" @onclick="() => DeleteCar(car.Id)">Supprimer</button>
                    </div>
                </div>
            }
        </div>

        <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    OnPreviousPage="PreviousPage"
                    OnNextPage="NextPage" />
    }
</div>

@if (showUpdatePopup)
{
    <div class="update-popup-overlay">
        <div class="update-popup-container">
            <UpdateCarPopup Car="selectedCar" OnUpdate="HandleUpdate" OnCancel="() => showUpdatePopup = false" />
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private string errorMessage = null;
    private List<CarDto> cars = new();
    private int currentPage = 1;
    private int carsPerPage = 9;
    private int totalCars = 0;
    private int totalPages => (int)Math.Ceiling((double)totalCars / carsPerPage);

    private bool showUpdatePopup = false;
    private CarDto selectedCar;

    protected override async Task OnInitializedAsync()
    {
        await GetUserCarsAsync();
    }

    private async Task GetUserCarsAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "You must be logged in to view your cars.";
            isLoading = false;
            return;
        }

        try
        {
            var response = await CarService.GetCarsAsync(token);

            if (response != null)
            {
                cars = response;
                totalCars = cars.Count;
            }
            else
            {
                errorMessage = "No cars found or there was an error retrieving the data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while fetching the cars: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToAddCar()
    {
        Navigation.NavigateTo("/add-car");
    }

    private void PreviousPage(int page)
    {
        currentPage = page;
    }

    private void NextPage(int page)
    {
        currentPage = page;
    }

    private async Task DeleteCar(int carId)
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token)) return;

        var success = await CarService.DeleteCarAsync(carId, token);

        if (success)
        {
            cars = cars.Where(c => c.Id != carId).ToList();
            totalCars = cars.Count;
        }
        else
        {
            errorMessage = "Échec de la suppression de la voiture.";
        }
    }

    private void OpenUpdatePopup(CarDto car)
    {
        selectedCar = new CarDto
            {
                Id = car.Id,
                Brand = car.Brand,
                Model = car.Model,
                Year = car.Year,
                LicensePlate = car.LicensePlate,
                ImageUrl = car.ImageUrl
            };
        showUpdatePopup = true;
    }

    private async Task HandleUpdate(CarDto updatedCar)
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "Token is missing. Please log in.";
            return;
        }

        try
        {
            await CarService.UpdateCarAsync(updatedCar, token);
            var index = cars.FindIndex(c => c.Id == updatedCar.Id);
            if (index >= 0) cars[index] = updatedCar;
            showUpdatePopup = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update the car: " + ex.Message;
        }
    }


}
